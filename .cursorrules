# Cursor Rules for Range Trader Project

## 通用开发准则
- 始终使用Python 3.10+，遵循PEP8风格，使用Poetry管理依赖
- 生成完整代码：包含导入、注释、错误处理、测试示例
- 内存优化：针对8G RAM，使用分批处理大数据集（如generator模式）
- 安全优先：隐藏API密钥，使用环境变量；优先模拟测试，避免真实风险
- 初学者友好：每行关键代码添加注释解释概念
- 效率优先：最短路径实现，避免不必要的额外功能
- 输出结构化：使用列表/编号格式；不确定时询问澄清而非假设

## 加密货币交易项目特定准则
- 聚焦Python代码：基于原子任务实现（如K线获取、ML预测、交易策略）
- 完整实现：包含导入（ccxt, pandas, numpy等）、函数定义、测试代码
- 加密货币数据优化：
  - 使用CCXT库拉取交易所数据
  - 分块处理10M+ K线数据防止内存溢出
  - 优先使用高效库（CCXT for API, Pandas for分析, NumPy for计算）
- 交易安全：
  - 处理数据滞后性，杜绝未来数据泄露
  - 模拟交易测试，避免真实资金风险
  - 实现止损和风险管理机制
- 性能优化：
  - 使用NumPy向量化操作
  - 分批处理大数据集（generator模式）
  - 针对M2 Mac 8G RAM优化
- 代码结构：避免复杂结构，使用简单循环/函数，每行添加注释解释
- 工作流程：生成后建议commit message；大任务拆分为步骤

## 代码风格要求
- 使用中文注释解释关键概念（如"K线"、"止损"等）
- 函数和变量命名使用英文，注释使用中文
- 每个函数都要有docstring说明功能和参数
- 错误处理要具体，不要使用裸露的except

## 项目结构偏好
- 使用模块化设计，每个功能独立成文件
- 配置文件使用.env文件管理敏感信息
- 测试文件以test_开头
- 工具函数放在utils模块中

